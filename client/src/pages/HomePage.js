import { styled } from 'styled-components';
import { FaSearch } from 'react-icons/fa';
import { FcLike } from 'react-icons/fc';
import CategoryBtn from '../components/CategoryBtn';
import CategoryMappings from '../components/CategoryMappings';
import { useState, useEffect } from 'react';
import axios from 'axios';
import { Link } from 'react-router-dom';
import InfiniteScroll from 'react-infinite-scroll-component';

const HomePage = styled.div`
  display: flex;
  justify-content: center;

  .main-container {
    margin: 0px 320px;
  }

  .main-header {
    display: flex;
    justify-content: center;
    height: 350px;
    margin-top: 50px;
    align-items: center;
    animation: slideTExt 10s linear infinite; // 5Ï¥à ÎèôÏïà ÏùºÏ†ïÌïú ÏÜçÎèÑ(linear)Î°ú Ïï†ÎãàÎß§Ïù¥ÏÖòÏù¥ Ï†ÅÏö©ÎêòÍ≥† Î¨¥Ìïú Î∞òÎ≥µÎê® (infinite)
  }
  // Ïò§Î•∏Ï™ΩÏóêÏÑú ÏôºÏ™ΩÏúºÎ°ú Ïù¥ÎèôÌïòÍ≤åÎÅî Ìö®Í≥ºÏ£ºÍ∏∞
  @keyframes slideTExt {
    0% {
      transform: translateX(100%);
    }
    100% {
      transform: translateX(-100%);
    }
  }
  .service-introduction {
    color: white;
  }
  .search-container {
    display: flex;
    justify-content: center;
    margin-bottom: 10px;
  }
  .search {
    display: flex;
    width: 500px;
    height: 40px;
    border: solid 1px black;
    border-radius: 10px;
    align-items: center;
    justify-content: space-between;
  }
  .search-text {
    background: none;
    border: none;
    width: 500px;
    height: 40px;
    caret-color: black; // Í≤ÄÏÉâÏ∞Ω cursor Ìö®Í≥º
    padding-left: 20px;
    outline: none;
    // Í≤ÄÏÉâÏãú input ouline ÏóÜÏï†Ï£ºÍ∏∞
  }
  .categorys-container {
    display: flex;
    flex-direction: row;
    list-style: none;
    justify-content: center;
    padding: 0;
    margin: 20px 0px;
  }
  .invitation-container {
    display: grid;
    flex-direction: row;
    margin-top: 20px;
    grid-template-columns: repeat(3, 1fr);
  }
  .invitation-item {
    display: flex;
    justify-content: center;
    height: 300px;
    margin-bottom: 30px;
  }
  .likes-container {
    display: flex;
    justify-content: flex-end;
    align-items: center;
    margin-bottom: 25px;
  }
  .likes-sort {
    display: flex;
    align-items: center;
    background: none;
    border: none;
    cursor: pointer;
    font-size: 25px;
    border: solid 1px #d9d9d9;
    padding: 3px 5px;
    border-radius: 20px;
  }
  .likes-text {
    display: flex;
    align-items: center;
    font-size: 15px;
    font-weight: 800;
    margin-left: 5px;
    cursor: pointer;
  }
`;

const SearchBtn = styled.button`
  display: flex;
  align-items: center;
  padding-right: 10px;
  background: none;
  border: none;
  cursor: pointer;
  font-size: 18px;
`;

export default function Homepage() {
  const [invitation, setInvitation] = useState([]); // Î™®Îì† Í≤åÏãúÎ¨º Ï†ÄÏû•
  // const [filteredInvitation, setFilteredInvitation] = useState([]); // ÌïÑÌÑ∞Îêú Í≤åÏãúÎ¨ºÏùÑ Ï†ÄÏû• -> Ìï¥Îãπ ÏÉÅÌÉúÎ•º currentInvitaions ÏÉÅÌÉúÍ∞íÏúºÎ°ú Ï†ÄÏû• Í∞ÄÎä•
  const [selectedCategory, setSelectedCategory] = useState('CATEGORY_ALL'); // ÏÑ†ÌÉùÎêú Ïπ¥ÌÖåÍ≥†Î¶¨Î•º Ï†ÄÏû•
  const [search, setSearch] = useState(''); // Í≤ÄÏÉâÏñ¥Î•º ÏûÖÎ†•ÌïòÎäî ÏÉÅÌÉú Ï∂îÍ∞Ä
  const [currentPage, setCurrentPage] = useState(1);
  const [isLoading, setIsLoading] = useState(false);
  const [currentInvitations, setCurrentInvitations] = useState([]);
  const PER_SCROLL = 10;

  const fetchAllInvitaion = () => {
    axios
      .get('http://3.39.76.109:8080/boards')
      .then((response) => {
        const newData = response.data;
        const sortedInvitation = newData.sort(
          (a, b) => new Date(b.boardId) - new Date(a.boardId),
        );
        setInvitation(sortedInvitation);
      })
      .then(() => {
        getInvitations(PER_SCROLL);
      })
      .catch((error) => {
        console.log('error', error);
      })
      .finally(() => {
        setIsLoading(false);
      });
  };

  const getInvitations = (perscroll) => {
    if (invitation.length === 0) return; // Î°úÎî© Ï§ëÏù¥Í±∞ÎÇò Ï¥àÎåÄÏû• Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏúºÎ©¥ Ìï®ÏàòÎ•º Ï¢ÖÎ£åÌï©ÎãàÎã§.
    const prevInvitations = [...currentInvitations];
    // invitation Î∞∞Ïó¥ÏóêÏÑú ÌòÑÏû¨ ÌéòÏù¥ÏßÄÏóê Ìï¥ÎãπÌïòÎäî Îç∞Ïù¥ÌÑ∞Î•º Ïä¨ÎùºÏù¥Ïä§Ìï©ÎãàÎã§.
    const newInvitations = invitation.slice(
      (currentPage - 1) * perscroll,
      currentPage * perscroll,
    );

    // ÌòÑÏû¨ Î≥¥Ïù¥Îäî Ï¥àÎåÄÏû• Îç∞Ïù¥ÌÑ∞Ïóê ÏÉàÎ°úÏö¥ Îç∞Ïù¥ÌÑ∞Î•º Ï∂îÍ∞ÄÌï©ÎãàÎã§.
    setCurrentInvitations([...prevInvitations, ...newInvitations]);

    // Îã§Ïùå ÌéòÏù¥ÏßÄÎ°ú ÌòÑÏû¨ ÌéòÏù¥ÏßÄÎ•º ÏóÖÎç∞Ïù¥Ìä∏Ìï©ÎãàÎã§.
    setCurrentPage(currentPage + 1);
  };

  useEffect(() => {
    fetchAllInvitaion();
  }, []);

  useEffect(() => {
    if (invitation.length === 0) return;
    if (currentPage > 1) return;
    getInvitations(PER_SCROLL);
  }, [invitation]);

  const handleCategoryClick = (category) => {
    setSelectedCategory(category); // ÏÑ†ÌÉùÎêú Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÉÅÌÉúÎ•º ÏÑ§Ï†ï
    if (category === 'CATEGORY_ALL') {
      // "ALL" Î≤ÑÌäºÏùÑ ÎàÑÎ•∏ Í≤ΩÏö∞ÏóêÎäî Ï†ÑÏ≤¥ Îç∞Ïù¥ÌÑ∞Î•º ÌïÑÌÑ∞ÎßÅÌïòÏßÄ ÏïäÍ≥† Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©Ìï©ÎãàÎã§.
      setCurrentInvitations(invitation);
    } else {
      // Îã§Î•∏ Ïπ¥ÌÖåÍ≥†Î¶¨ Î≤ÑÌäºÏùÑ ÎàÑÎ•∏ Í≤ΩÏö∞ Ìï¥Îãπ Ïπ¥ÌÖåÍ≥†Î¶¨Îßå ÌïÑÌÑ∞ÎßÅÌïòÏó¨ Ìï†ÎãπÌï©ÎãàÎã§.
      const filteredData = invitation.filter(
        (item) => item.category === category,
      );
      setCurrentInvitations(filteredData);
      console.log('ÌïÑÌÑ∞Îêú Îç∞Ïù¥ÌÑ∞', filteredData);
    }
  };

  // Í≤ÄÏÉâ Î≤ÑÌäºÌÅ¥Î¶≠Ïãú Ìò∏Ï∂úÎêòÎäî Ìï®Ïàò
  const titleSearch = (category) => {
    // ÏÑ†ÌÉùÎêú Ïπ¥ÌÖåÍ≥†Î¶¨Í∞Ä ÏûàÏúºÎ©¥
    // if (selectedCategory) {
    // Ï†ÑÏ≤¥ Í≤ÄÏÉâÏ∞ΩÏóêÏÑú Í≤ÄÏÉâÎêòÎäî urlÍ≥º ÏÑ†ÌÉùÎêú Ïπ¥ÌÖåÍ≥†Î¶¨ÏóêÏÑúÎßå Í≤ÄÏÉâÎêòÎäî url
    const searchApi =
      category === 'CATEGORY_ALL'
        ? `http://3.39.76.109:8080/boards/search/title/?title=${search}`
        : `http://3.39.76.109:8080/boards/category/${category}/search/title/?title=${search}`;
    axios
      .get(searchApi)
      .then((response) => {
        const titleData = response.data;
        setCurrentInvitations(titleData);
        console.log(titleData); // Í≤ÄÏÉâÏ∞ΩÏóê Í≤ÄÏÉâÏñ¥ÏôÄ ÎèôÏùºÌïú ÎÇ¥Ïö©Îßå ÌïÑÌÑ∞
        setSearch('');
      })
      .catch((error) => {
        console.log('Error', error);
      });
    // }
  };
  // ÌÇ§ Ïù¥Î≤§Ìä∏Ìï∏Îì§Îü¨ Ìï®Ïàò
  // EnterÎ•º Ï≥§ÏùÑÎïå tilteSearch Ìï®ÏàòÎ•º Î∂àÎü¨Ïò¥
  const handleKeyPress = (e) => {
    if (e.key === 'Enter') {
      titleSearch(selectedCategory); // ÏÑ†ÌÉùÎêú Ïπ¥ÌÖåÍ≥†Î¶¨ÏóêÏÑúÎßå tiltesearchÌï®ÏàòÍ∞Ä Ïã§Ìñâ
    }
  };

  // Ï†ÑÏ≤¥ Ï¥àÎåÄÍ∏Ä Ï¢ãÏïÑÏöî Ïàú
  const likesSort = (category) => {
    const apiUrl =
      category === 'CATEGORY_ALL'
        ? `http://3.39.76.109:8080/boards/likes`
        : `http://3.39.76.109:8080/boards/category/${category}/likes`;
    axios
      .get(apiUrl)
      .then((response) => {
        const likeData = response.data;
        // Ï¢ãÏïÑÏöî ÏàúÏÑúÎåÄÎ°ú Î≥¥Ïó¨Ï£ºÍ∏∞ ÏúÑÌïú Íµ¨ÌòÑ
        const sortedData = likeData.sort(
          (a, b) => b.boardLikesCount - a.boardLikesCount,
        );
        setCurrentInvitations(sortedData);
        console.log(sortedData);
      })
      .catch((error) => {
        console.log('Error', error);
      });
  };

  // Ï¢ãÏïÑÏöîÏàúÏùÑ ÏúÑÌïú ÌÅ¥Î¶≠ Ìï®Ïàò
  const handleLikeSortClick = () => {
    likesSort(selectedCategory);
  };

  return (
    <HomePage>
      <div className="main-container">
        <div className="main-header">
          <h1 className="service-introduction">
            Hi! Make new friends at Celebee üêù
          </h1>
        </div>
        <div className="categorys-container">
          <ul className="categorys-container">
            {Object.keys(CategoryMappings).map((key) => {
              const categoryName = CategoryMappings[key]?.name;
              const isSelected = selectedCategory === categoryName;
              return (
                <CategoryBtn
                  key={key}
                  text={CategoryMappings[key]?.label}
                  color={
                    CategoryMappings[key]?.backgroundColor ||
                    CategoryMappings[key]?.color
                  }
                  isSelected={isSelected}
                  onClick={() => handleCategoryClick(categoryName)}
                />
              );
            })}
          </ul>
        </div>
        <div className="search-container">
          <div className="search">
            <input
              type="text"
              id="search"
              placeholder="Search"
              className="search-text"
              value={search}
              onChange={(e) => setSearch(e.target.value)}
              onKeyPress={handleKeyPress}
            />
            <SearchBtn className="icon-search" onClick={titleSearch}>
              <FaSearch />
            </SearchBtn>
          </div>
        </div>
        <div className="likes-container">
          <button className="likes-sort" onClick={handleLikeSortClick}>
            <FcLike />
            <span className="likes-text">Liked Order</span>
          </button>
        </div>
        <InfiniteScroll
          dataLength={currentInvitations.length}
          next={() => getInvitations(PER_SCROLL)}
          hasMore={true}
          loader={isLoading ? <h4>Loading</h4> : null}
          className="invitation-container"
          scrollThreshold={1}
        >
          {currentInvitations.map((item) => (
            <Link
              key={item.boardId}
              to={`/boards/${item.boardId}`}
              className="invitation-item"
            >
              <img src={item.imageUrl} alt="Ï¥àÎåÄÏû• Ïù¥ÎØ∏ÏßÄ" />
            </Link>
          ))}
        </InfiniteScroll>
      </div>
    </HomePage>
  );
}
